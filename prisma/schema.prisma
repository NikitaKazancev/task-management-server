generator client {
   provider      = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id        String   @id @default(cuid())
   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt() @map("updated_at")

   email    String  @unique
   name     String?
   password String
   role     Role    @default(USER)

   tasks            Task[]
   userTimer        UserTimer?
   timeBlocks       TimeBlock[]
   pomodoroSessions PomodoroSession[]

   @@map("users")
}

enum Role {
   USER
   ADMIN
}

model UserTimer {
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @unique @map("user_id")

   workInterval   Int? @default(50) @map("work_interval")
   breakInterval  Int? @default(10) @map("break_interval")
   intervalsCount Int? @default(7) @map("intervals_count")

   @@map("user_timers")
}

enum Priority {
   low
   medium
   high
}

model Task {
   id        String   @id @default(cuid())
   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt() @map("updated_at")

   name        String
   priority    Priority?
   isCompleted Boolean?  @default(false) @map("is_completed")

   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @map("user_id")

   @@map("tasks")
}

model TimeBlock {
   id        String   @id @default(cuid())
   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt() @map("updated_at")

   name     String
   color    String?
   duration Int
   order    Int     @default(1)

   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @map("user_id")

   @@map("time_blocks")
}

model PomodoroSession {
   id        String   @id @default(cuid())
   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt() @map("updated_at")

   isCompleted Boolean? @default(false) @map("is_completed")

   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @map("user_id")

   rounds PomodoroRound[]

   @@map("pomodoro_sessions")
}

model PomodoroRound {
   id        String   @id @default(cuid())
   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt() @map("updated_at")

   totalSeconds Int      @map("total_seconds")
   isCompleted  Boolean? @default(false) @map("is_completed")

   session   PomodoroSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
   sessionId String          @map("session_id")

   @@map("pomodoro_rounds")
}
